import socket
import ssl
from OpenSSL import crypto

def main():
    # Create a TCP server
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('localhost', 4481))
    server.listen(5)

    # Build SSL context
    ctx = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    cert, key = create_self_signed_cert(2048, [('CN', 'localhost')], "Generated by Python/OpenSSL")
    
    # Load certificate and key into the context
    ctx.load_cert_chain(certfile=cert, keyfile=key)
    ctx.verify_mode = ssl.CERT_NONE  # Disable certificate verification for simplicity

    # Wrap the server socket in SSL
    ssl_server = ctx.wrap_socket(server, server_side=True)

    print("SSL server started, waiting for connections...")

    # Accept a connection
    connection, address = ssl_server.accept()
    print(f"Connection established with {address}")

    # Send a message to the client
    connection.send(b"Bah now")
    print("Sent message to client")

    # Close the connection
    connection.close()
    print("Connection closed")

def create_self_signed_cert(bits, cn, comment):
    # Create an RSA key with at least 2048 bits
    rsa_key = crypto.PKey()
    rsa_key.generate_key(crypto.TYPE_RSA, bits)

    # Create a self-signed X.509 certificate
    cert = crypto.X509()
    cert.set_version(2)
    cert.set_serial_number(1)

    # Set the certificate subject and issuer
    subject = cert.get_subject()
    issuer = cert.get_issuer()
    for name, value in cn:
        setattr(subject, name, value)
        setattr(issuer, name, value)

    # Set validity period (1 year)
    cert.gmtime_adj_notBefore(0)
    cert.gmtime_adj_notAfter(365*24*60*60)

    # Set public key and sign the certificate
    cert.set_pubkey(rsa_key)
    cert.sign(rsa_key, 'sha256')

    # Write the certificate and key to files
    cert_file = 'server_cert.pem'
    key_file = 'server_key.pem'
    with open(cert_file, "wt") as f:
        f.write(crypto.dump_certificate(crypto.FILETYPE_PEM, cert).decode("utf-8"))
    with open(key_file, "wt") as f:
        f.write(crypto.dump_privatekey(crypto.FILETYPE_PEM, rsa_key).decode("utf-8"))

    return cert_file, key_file

if __name__ == '__main__':
    main()

